.TH FMUX 1
.\" 29 april 2011
.SH NAME
fmux \- combine files by alternating bytes
.SH SYNOPSIS
.B fmux
[
.B -o
.I outfile
]
.I files...
.SH DESCRIPTION
.I Fmux
reads consecutive bytes from
.I files
and writes them to
.I outfile
(default standard output) by writing one byte from each file before moving to the next byte.
For instance,
.IP
.EX
fmux a b
.EE
.LP
writes the first byte of
.BR a ,
then the first byte of
.BR b ,
then the second byte of
.BR a ,
and so on.
.LP
.I Fmux
presently requires all files to have the same size; it does this by checking against the size of the first file given on the command line.
.LP
.I Fmux
returns 0 on success and nonzero on failure.
.SH BUGS
More constructive behavior if one file is shorter than the others could be done; the issue is that I do not know what the proper behavior is.
.LP
For the sake of low memory usage,
.I fmux
opens all files at once and reads them one byte at a time.
This is both slow and might run into an open file limit if logs of files are being multiplexed.
I could avoid these problems by reading one file at a time into a large buffer, but for significantly large files this won't do.
Is there a better way?
For my needs any approach would work, though I am seeing somewhat slow speeds...
(running
.I fmux
on the same 256KB (exact) file 6 times gives me a consistent 2.5 second runtime...)
And actually, would switching to using a buffer really make it faster?
.SH AUTHOR
Pietro Gagliardi (pietro10@mac.com)
.SH LICENSES
.I Fmux
is licensed under the MIT License (http://www.opensource.org/licenses/MIT), alternatively titled Expat License.
.LP
This manpage is licensed as so:
.IP
This work is licensed under the Creative Commons Attribution 3.0 Unported License.
To view a copy of this license, visit http://creativecommons.org/licenses/by/3.0/ or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.
